


--------------------------------------------------------------------------------

defines a long long variable:
long long x = 123456789123456789LL;

--------------------------------------------------------------------------------





---------------------------------------------------------------------------------
set and multiset (c++ standard library )
set is based on a balanced binary search tree and its operations work in O(log n)
time.
unordered_set is based on a hash table and its operations work, on average, 1
in O(1) time.

set structure also provides the functions lower_bound(x) and
upper_bound(x) that return an iterator to the smallest element in a set whose
value is at least or larger than x,

cout << *s.lower_bound(x) << "\n";
cout << *s.upper_bound(x) << "\n";
---------------------------------------------------------------------------------
map 
map is based on a balanced binary search tree and accessing elements
takes O(log n) time, while unordered_map uses hashing and accessing elements
takes O(1) time on average.

----------------------------------------------------------------------------------
Priority Queues

A priority queue is a multiset that supports element insertion and, depending on the
type of the queue, retrieval and removal of either the minimum or maximum element.
Insertion and removal take O(log n) time, and retrieval takes O(1) time.
By default, the elements in a C++ priority queue are sorted in decreasing order,



-----------------------------------------------------------------------------------

#define sfl(a)           scanf("%lld",&a)
-----------------------------------------------------------------------------------

ll gcd(ll a,ll b){
	return b == 0 ? a : gcd(b, a % b);
}	



int extendedgcd(int a, int b, int& x, int& y) {
    if (b == 0) {
        x = 1;
        y = 0;
        return a;
    }
    int x1, y1;
    int d = extendedgcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}

int exgcd(int a, int b, int& x, int& y) {
    x = 1, y = 0;
    int x1 = 0, y1 = 1, a1 = a, b1 = b;
    while (b1) {
        int q = a1 / b1;
        tie(x, x1) = make_tuple(x1, x - q * x1);
        tie(y, y1) = make_tuple(y1, y - q * y1);
        tie(a1, b1) = make_tuple(b1, a1 - q * b1);
    }
    return a1;
}

-----------------------------------------------------------------------------------


