#include <bits/stdc++.h>

using namespace std;
using ll = long long;

const int N = 100; //1e7+5
int lp[N+1];
vector<int> primes;
//it makes sense to use the described algorithm only until for numbers of order 10^7 and not greater.

void sieve(){ // sieve of Eratosthenes linear time 
	for (int i=2; i<=N; ++i) {
		if (lp[i] == 0) {
			lp[i] = i;
			primes.push_back (i);
		}
		for (int j=0; j<(int)primes.size() && primes[j]<=lp[i] && i*primes[j]<=N; ++j)
			lp[i * primes[j]] = primes[j];
	}
}


// return prime factorizations based on sieve precomputed primes 
vector<ll> primes_fact(ll n) { 
   vector<ll> factorization;
    for (ll d : primes) {
        if (d * d > n)
            break;
        while (n % d == 0) {
            factorization.push_back(d);
            n /= d;
        }
    }
    if (n > 1)
        factorization.push_back(n);
    return factorization;
}

int main(){
	sieve(); // this computes all primes until N
	vector<ll> ans = primes_fact(28); // this computes prime factorization. 28 = 2*2*7
}

