#include <bits/stdc++.h>

using namespace std;
using ll = long long;
/*
Modular Arithmetic
Sometimes, the answer to a problem is a very large number,
it suffices to use the types int and long long
(a + b) mod m = (a mod m + b mod m) mod m
(a − b) mod m = (a mod m − b mod m) mod m
(a · b) mod m = (a mod m · b mod m) mod m

what if a remainder is negative?
An easy way to make sure there are no negative remainders is to first calculate the
remainder as usual and then add m if the result is negative:
x = x%m;
if (x < 0) x += m;
However, this is only needed when there are subtractions in the code, and the
remainder may become negative
*/
------------------------------------------------------------------------------
int MOD =  1e9 + 7;
 
int mul(int a, int b) {
    return (1LL * a * b) % MOD;
}
 
int add(int a, int b) {
    int s = (a+b);
    if (s>=MOD) s-=MOD;
    return s;
}
 
int sub(int a, int b) {
    int s = (a+MOD-b);
    if (s>=MOD) s-=MOD;
    return s;
}
 
int po(int a, ll deg)
{
    if (deg==0) return 1;
    if (deg%2==1) return mul(a, po(a, deg-1));
    int t = po(a, deg/2);
    return mul(t, t);
}
 
int inv(int n)
{
    return po(n, MOD-2);
}



---------------------------------------------------------------------------------------------
/*when binpower is too big*/
//range [2 <= N <= 2^63-1] can be AC
    

using u64 = uint64_t;
using u128 = __uint128_t;

u64 binpower(u64 base, u64 e, u64 mmod) {
    u64 result = 1;
    base %= mmod;
    while (e) {
        if (e & 1){
            result = (u128)result * base % mmod;
        }
        base = (u128)base * base % mmod;
        e >>= 1;
    }
    return result;
}



------------------------------------------------------------------------------------------
//regular binpow

ll binpow(ll a,ll b,ll mod){
	a %= mod;
	ll ans = 1;
	while(b > 0){
		if(b & 1) ans = ans * a % mod;
		a = a * a % mod;
		b >>= 1;
	}
	return ans;
}








